                                                         1.WHAT IS DIFFERENT BETWEEN NULL AND UNDEFINED?



ans -  THE MAIN DIFFERENT BETWEEN NULL AND UNDEFINED ARE-
       NULL DATATYPE IS SHOW THE EMPTY SPACE BUT THE  UNDEFINED DTATYPE IS SHOW UNDEFINED ON THE SCREEN OF THE PAGE. 


                                                               2.HOW MANY DATATYPE ARE THERE IN JAVASCRIPT?
 


ans-  THERE ARE MANY DATATYPES IN  JAVASCRIPT-
       * STRINGS- TO REPRESENT THE SINGLE OR DOBLE QUOTES;
       * NUMBER-  TO REPRESENT THE NUMBER WITH OR WITHOUT THE DECIMAL;
       * BOOLEAN- TO REPRESENT THE CONDITIONAL VALUE LIKE TRUE OR FALSE;
       * BIGINT-  TO REPRESENT THE BIG INTEGER OR NUMBER LIKE ANY NUMBER ARE REPEATED AND BIG IN DIGITS; 
       * OBJECTS-TO REPRESENT  THE USE OF CURLY BRACES{};
       * UNDEFINED -TO REPRESENT THE UNDEFINED VALUE ;
       * NULL- TO REPRESENT THE EMPTY SPACE ON THE PAGE;
       * ARRAY- TO REPRESENT THE VALUE IN SQUARE BRACES[] SEPARATED BY COMMAS;
       * FUNCTION-TO REPRESENT THE FUNCTION VALUE LIKE myFunction;
       * SYMBOL-TO REPRESENT THE ANY SYMBOLIC VALUE LIKE #,$,@,!etc;

                                              3.WHAT IS THE MAIN DIFFERANCE BETWEEN VAR ,LET AND CONST?


ans- THE MAIN DIFERANCE BETWEEN VAR ,LET AND CONST ARE-

VAR- IT HAS globaly  SCOPE  ;
     IT WORKS ON OLD BROWSER ;
     IT CONTAINED VALUE IS  CHANGABLE ;
     IT IS REDECLARING;     
     IT IS REASSIGN;
     IT IS HOISTED;
     IT IS BINDING THE VALUE;

LET - IT HAS THE block SCOPE ;
      IT WORKS ON THE ES6 VERSION OF THE JS (2015);
      IT CONTAINED VALUE IS  UNCHANGABLE;
      IT IS NOT REDECLARED;
      IT IS REASSIGN;
      IT IS NOT HOISTED;
      IT IS NOT BINDING THE VALUE;


CONST-IT HAS THE BLOCK SCOPE ;
      IT WORKS ON THE ES6 VERSION OF THE JS (2015);
      IT CONTAINED VALUE IS  UNCHANGABLE;
      IT IS NOT REDECLARED;
      IT IS  NOT REASSIGN;
      IT IS NOT HOISTED;
      IT IS NOT BINDING THE VALUE;



                                                 4.HOW MANY OUTPUT  print DISPLAY IN JAVASCRIPT ?
  

ans- THERE ARE FOLLOWING OUTPUT DISPLAY IN JAVASCRIPT- 
   
    1.  document.write()
    2.  document.getElementById()
    3.  .innerHTML()
    4.  console.log()
    5.  window.alert()
    6.  window .print()



                                       5.what is different between double equal  to and triple equal to in javascript ?


ans- THE MAIN DIFFERENCE BETWEEN DOUBLE EQUAL TO AND TRIPLE EQUAL TO ARE-
 

      IN DOUBLE EQUAL TO - IN JAVASCRIPT TO USE THE DOUBLE EQUAL TO THEN THE TWO VARIABLES ARE EQUAL ,IT DOESN'T EFFECT BY DATA TYPE .(==)


      IN TRIPLE EQUAL TO -IN JAVASCRIPT TO USE THE TRIPLE EQUAL TO THEN THE TWO VALUES AND DATA TYPES ARE EQUAL THEN IS (===) .
  
EXAMPLE- <!DOCTYPE html >
      <html>
      <body>
<h1> THIS IS MY JAVASCRIPT PROGRAMME </h1>
<p  id= "demo"> THIS IS MY JAVASCRIPT</p> 
         <script>
 let x==10;
document.getElementById("demo")inner.HTML= x==8;
   
  let y==="83";

document.getElementById("demo")inner.HTML= y===83;
 
</script>
          </body>
        </html>

answer will be true and false.

                                                           6.WHAT IS HOISTING IN JAVACSRIPT?



answer-  IN JAVASCRIPT ,HOISTING REFERS TO THE BUILT IN BEHAVIOUR OF THE LANGUAGE THROUGH WHICH DECLARATION  OF
 THE FUNCTION AND VARIABLE ARE MOVED TO TOP OF THEIR SCOPE ALL BEFORE EXECUTION . 
    


EXAMPLE- <!DOCTYPE html >
      <html>
      <body>
<script>
document.write(name);
 var name= "virat" ;
  

</script>
</body>
</html>

answer will be virat.


                                                            7.WHAT IS TERNARY OPERATOR IN JAVASCRIPT?



answer- The ternary operator is used in javascript  to conditional value .this is work as the if and else condition.
       it is denote in javascript ( condition ? if : else ).

example- <!DOCTYPE html >
 <html>
<p id ="demo"> </p>
<body>
<script>
let person= age<18 ?  NOT CAPABLE FOR VOTING :  CAPABLE FOR VOTING ;
document.getElementById("demo").innerHTML=PERSON;

</script>
</body>
</html>

                                                    8.what is function or arrow function in js?



answer-function is the keyword that create a function . function is a block of code designed to perform a specific task.

arrow function -Arrow functions in JavaScript are a concise way to write function expressions. it introduced the ES6 in javascript.

//function 

example-<script>
 function add(a, b) {
    return a + b;
}

let sum = add(3, 5);
console.log(sum); 

</script>

//arrow function 

example-  <script>
const myFunction = (a, b) => a + b;
 myFunction1 = (a, b) => a - b;
 myFunction2 = (a, b) => a *b;
 myFunction3 = (a, b) => a / b;

document.getElementById("demo1").innerHTML = myFunction(11, 9);
document.getElementById("demo2").innerHTML = myFunction1(11, 9);
document.getElementById("demo3").innerHTML = myFunction2(11, 9);
document.getElementById("demo4").innerHTML = myFunction3(11, 9);

</script>

                                                      9.what is object in javascript?



answer-it is the keyword to create the objects in js.it is denoted by the expression under curly braces i.e.{...}.

example-<script>

let person = {
    name: "Alice",
    age: 25,
    greet: function() {
        console.log("Hello, " + this.name + "!");
    }
};
</script>


                                                 10. what is class in javascript?



answer-class is the keyword to create the class.it is the blueprint in javacsript to creating the objects.

example-class Person {
  constructor(name, age) {
    this.name = name;
    this.age = age;
  }

                                                 11.what what is string in javascript?



answer-A string is a sequence of characters used to represent text. 
Strings are one of the primitive data types in JavaScript and can be enclosed in single quotes ('), double quotes (").

example-let string1 = "Hello, World!";  // Double quotes
        let string2 = 'Hello, World!';  // Single quotes
 
                                         12.what is string template /literals templates in javacsript?



answer-Template literals in JavaScript are a way to create strings that allow embedded expressions, multiline strings, 
and string interpolation in a clean and readable manner. it is expressed as `${this},${this}`.it is used in new version ES6 js.it is used as dynamically string in js.

example-const name = "Alice";
const greeting = `Hello, ${name}!`;
console.log(greeting);


                                                         13.what is bigInt in javascript?



answer-it is the primitive data type that can used to represent the large integer.
 
example-const big = 123456789012345678901234567890n;
console.log(big); 

                                                   14.what is array and array method in javascript ?



answer-an array is a data structure used to store multiple values in a single variable. it represent as [" "," "," "] enclosed by square braces and separated by commas.

example-
 const arr = [10, 20, 30];
console.log(arr[0]);
console.log(arr[2]); 

                                                         array method ----
 


<p>THE LENGTH PROPERTY SETS OR RETURN THE NUMBER OF ELEMENT IN AN ARRAY</p>
<h2>THE PUSH METHOD TO USE ADDING NEW ELEMENTS </h2>
<h2 >THE POP METHOD TO USE REMOVE THE LAST ELEMENTS  </h2>
<h2 > THE SPLICE METHOD TO USE ADDING AND REMOVING THE ARRAY ELEMENTS </h2>
<h2>THE SHIFT METHOD TO USE REMOVING THE ELEMENTS ON THE BEGNING OF THE ARRAY </h2>
<h2>THE UNSHIFT METHOD TO USE ADDING NEW ELEMENTS ON THE BEGINING OF THE ARRAY </h2>
<h2>THE INCLUDE METHOD TO USE CHECK THE ARRAY ELEMENT ON YOUR GIVEN ARRAY ELELMENT  </h2>
<h2> THE REVERSE ARRAY TO USE REVERSE THE ARRAY OF GIVEN THE ELEMENT</h2>
<h2>THE CONCAT METHOD TO USE MERGING THE ARRAY OF THE ELEMENT  </h2>
<h2>THE JOIN METHOD TO USE JOIN NEW ELEMENT BETWEEN TWO ARRAY OF THE ELEMENT </h2>
<h2>THE SLICE METHOD TO USE REMOVING THE INDEXING ARRAY OF THE ELEMENT </h2>
<h2>THE SORT METHOD TO USE SORTING THE ARRAY OF THE ELEMENT ALPHABETICALY   </h2>
<p id="demo"></p>
<p id="demo1"></p>
<p id="demo2"></p>
<p id="demo3"></p>
<p id="demo4"></p>
<p id="demo5"></p>
<p id="demo6"></p>
<p id="demo7"></p>
<p id="demo8"></p>
<p id="demo9"></p>
<p id="demo10"></p>
<p id ="demo11"></p>
<script>
    const fruit= ["Apple"  ,   " Mango"  , " Kiwi"  ,"Strawary "  , "Dragonfruits "  ,  " Lichi"  , "Pineapple"  , " Watermelon"];
    function myFunction(){
        fruit.length=(8) ;    
     document.getElementById("demo").innerHTML=fruit;
     } function myFunction1(){
        fruit.push ("Orange"); 
     document.getElementById("demo1").innerHTML=fruit;
     }function myFunction2(){
        fruit.pop(); 
    document.getElementById("demo2").innerHTML=fruit;
     }function myFunction3(){
        fruit.splice(2,1 );   
    document.getElementById("demo3").innerHTML=fruit;
     }function myFunction4(){
        fruit.shift();   
    document.getElementById("demo4").innerHTML=fruit;
     }function myFunction5(){
        fruit.unshift("pumkin","pomigrains");    
    document.getElementById("demo5").innerHTML=fruit;
    }function myFunction6(){    
    document.getElementById("demo6").innerHTML=" gauva,pomigrain : "   + fruit.includes("gauva","pomigrains ") ;
    }function myFunction7(){
        fruit.reverse();    
    document.getElementById("demo7").innerHTML=fruit;
    }function myFunction8(){ 
    document.getElementById("demo8").innerHTML=fruit.concat("BANANA","BLACKBERRY");
    }function myFunction9(){   
    document.getElementById("demo9").innerHTML=fruit.join("@");
    }function myFunction10(){    
    document.getElementById("demo10").innerHTML=fruit.slice(5);
    }function myFunction11(){    
    document.getElementById("demo11").innerHTML=fruit.sort();
    }
</script>
<button onclick="myFunction()">CLICKBUTTON</button><br><br><br>
<button onclick="myFunction1()">CLICKBUTTON1</button><br><br><br>
<button onclick="myFunction2()">CLICKBUTTON2</button><br><br><br>
<button onclick="myFunction3()">CLICKBUTTON3</button><br><br><br>
<button onclick="myFunction4()">CLICKBUTTON4</button><br><br><br>
<button onclick="myFunction5()">CLICKBUTTON5</button><br><br><br>
<button onclick="myFunction6()">CLICKBUTTON6</button><br><br><br>
<button onclick="myFunction7()">CLICKBUTTON7</button><br><br><br>
<button onclick="myFunction8()">CLICKBUTTON8</button><br><br><br>
<button onclick="myFunction9()">CLICKBUTTON9</button><br><br><br>
<button onclick="myFunction10()">CLICKBUTTON10</button><br><br><br>
<button onclick="myFunction11()">CLICKBUTTON11</button>


                                                  15.what is if and else in javascript?



answer-the if and else statements are used to perform conditional execution of code based on whether a specified condition evaluates to true or false.



example-const age = 16;
if (age >= 18) {
    console.log("You are eligible to vote.");
} else {
    console.log("You are not eligible to vote.");
}


                                                      16.what is Booleans in javascript?




answer-Boolean is a primitive data type that represents one of two values: true or false. 
Booleans are commonly used in programming for conditional statements and logic operations.


example-const isAvailable = true;
const isComplete = false;


                                              17.what is switch in javascript.how to use?



answer-The switch statement in JavaScript is a control flow statement that evaluates an expression and matches 
its value against multiple possible cases. 
 
                                                  

                                                  IT USED AS- 

example-
const day = "Monday";

switch (day) {
    case "Monday":
        console.log("Start of the work week!");
        break;
    case "Friday":
        console.log("Almost the weekend!");
        break;
    case "Saturday":
    case "Sunday":
        console.log("It's the weekend!");
        break;
    default:
        console.log("Midweek blues!");
}


                                                  18.what is loop in javascript.how many loops in js explain with examples?   



answer-Loops in JavaScript are used to repeatedly execute a block of code as long as a specified condition is true. 

                               there are following type of loop-

*For loop-The for loop is the most commonly used loop. It runs a block of code a specific number of times.

example-for (let i = 0; i < 5; i++) {
    console.log("Iteration:", i);


*while loop-The while loop runs as long as the specified condition is true.

example-let i = 0;
while (i < 5) {
    console.log("Iteration:", i);
    i++;
}


*Do while loop-The do...while loop is similar to the while loop, but it ensures the code runs at least once, regardless of the condition.


example-let i = 0;
do {
    console.log("Iteration:", i);
    i++;
} while (i < 5);

*for...in loop-The for...in loop is used to iterate over the properties of an object.


example-const person = { name: "John", age: 30, city: "New York" };

for (let key in person) {
    console.log(`${key}: ${person[key]}`);
}

*for...of loop-The for...of loop is used to iterate over iterable objects such as arrays, strings, or other iterable data structures.

example-const fruits = ["apple", "banana", "cherry"];

for (let fruit of fruits) {
    console.log(fruit);
}



                                                  19.what is main difference between break and continue?



*Break - break is Exits the loop immediately.
example - for (let i = 0; i < 10; i++) {
    if (i === 5) {
        break; // Exit the loop when i equals 5
    }
    console.log(i);
}

*continue- continue is Skip the current iteration and moves to the next.

example-for (let i = 0; i < 10; i++) {
    if (i % 2 === 0) {
        continue; // Skip even numbers
    }
    console.log(i);
}

 
                                                               20.what is setter and getter in javascript?




answer-Setters and getters in JavaScript are methods used to get and set the values of object properties. 
They are part of the accessor properties in JavaScript.it is used to modify the properties.

example-const person = {
    firstName: "John",
    lastName: "Doe",
    // Getter for fullName
    get fullName() {
        return `${this.firstName} ${this.lastName}`;
    },
    // Setter for fullName
    set fullName(name) {
        const [first, last] = name.split(" ");
        this.firstName = first;
        this.lastName = last;
    }
};

// Using the getter
console.log(person.fullName);

// Using the setter
person.fullName = "Jane Smith";
console.log(person.firstName); 
console.log(person.lastName);  


                                                    21.what is typeof in javascript.how to use in js?



answer-typeof operator in javascript is determine the type of value and variable.it returns the strings.


example-console.log(typeof 42);   // "number"
console.log(typeof "hello");     // "string"
console.log(typeof true);       // "boolean"
console.log(typeof undefined);  // "undefined"
console.log(typeof Symbol("id"));// "symbol"
console.log(typeof 10n);         // "bigint"



                                                        22.what is destructuring in javascript?



answer- Destructuring in JavaScript is a convenient way to extract values from arrays or objects and assign them
 to variables in a single step. It makes code more concise and readable.


example-<script>
    //array type
let array=["Bmw","Jaguar","Mustang","Audi","Bukati" ];
let [a,b,c,d,e]=array;
document.write(a,"<br>" );
document.write(b,"<br>" );
document.write(c,"<br>" );
document.write(d,"<br>" );
document.write(e,"<br>","<br>","<br>","<br>","<br>" );
// object type
let obj={f:"mango",g:"lichi",h:"gauva",i:"pineapple",j:"watermelon" };
let{f,g,h,i,j} =obj;
document.write(f,"<br>" );
document.write(g,"<br>" );
document.write(h,"<br>" );
document.write(i,"<br>" );
document.write(j,"<br>" );

</script>


                                                                            23.what is modules in javascript?




answer-Modules in JavaScript are reusable pieces of code that 
can be exported from one file and imported into another.  

*Exporting: Makes code available to other files.
*Importing: Brings exported code into a file.

example-export const square = x => x * x;
export default function double(x) {
    return x * 2;
}

// main.js
import double, { square } from './utils.js';

console.log(double(4)); 
console.log(square(4));  


                                                           24.what is class inheritance in jAVASCRIPT?



answer-Class inheritance in JavaScript allows one class (child class) to inherit
 the properties and methods of another class (parent class). 
 
example-
<script>
class cars{
constructor(brand){
this.carName=brand;
}
present(){
return this.carName;
} 
 }
class model extends cars{
constructor(brand,mod ){
super(brand);
this.model=mod;
}
show(){
return this.present() +"<br>"+this.model;
}
 }
const mycompany= new model("BMW","AUDI");
document.getElementById("demo").innerHTML=mycompany.show();
</script>

25.what is class statics in javascript?
answer-static methods and properties belong to the class itself, rather than 
instances of the class. Static methods are often used for utility functions.

example-class MyClass {
    static myStaticProperty = "Static Property";
}

console.log(MyClass.myStaticProperty);


                                                        26.what is promises in javascript?


answer-A Promises in JavaScript is an object representing the eventual completion (or failure) of an 
asynchronous operation and its resulting value.


example-<script>

    function myDisplayer(some) {
  document.getElementById("demo").innerHTML = some;
}
let myPromise = new Promise(function(myResolve, myReject) {
  let x = 2023;

// some code (try to change x to 5)

  if (x == 2024) {
    myResolve("welcome in  this year");
  } else {
    myReject("Error present year");
  }
});
myPromise.then(
  function(value) {myDisplayer(value);},
  function(error) {myDisplayer(error);}
);
</script>

                                         27.what is difference between foreach and maps?



answer-*forEach: Used for performing side effects (e.g., logging, updating variables) on each 
element of an array. It does not return a new array.it is mutable.it has changable because it cannot returns new array.

*map: Used to transform an array by applying a function to each element, 
and it returns a new array with the transformed values.it is not mutable.it has changable because it can return the new array.

example-
                                               for each---

const numbers = [1, 2, 3];
let sum = 0;
numbers.forEach(num => {
    sum += num; 
});
console.log(sum);
const result = numbers.forEach(num => num * 2);
console.log(result); // Output: undefined
                              

                                          map---

const numbers = [1, 2, 3];
const doubled = numbers.map(num => num * 2);
console.log(doubled); 
console.log(numbers); 

                                                            28.what is asyn/await in js?


answer- *asyn-The async keyword is used to define a function that always returns a Promise.
Even if you return a value directly, JavaScript wraps it in a resolved promise.

*await-The await keyword pauses the execution of an async 
function until a promise is resolved or rejected.
It can only be used inside an async function.

example-async function fetchData() {
    const response = await fetch("https://api.example.com/data");
    const data = await response.json();
    console.log(data);
}

                                            29.what is class constructor and object constructor in js?
 


answer-A constructor in JavaScript is a special method of a class 
used for creating and initializing objects

example-<script>
   class person{
constructor(name,age,address ){
this.name= name;
this.age=age ;
this.address= address;
}
  }
const myperson1= new person(" KOMAL",22 ,"DELHI");
const myperson2= new person( " KUHU",14 ,"AURANGABAD");
document.getElementById("demo").innerHTML =" I AM"+  myperson1.name+". "+ "MY AGE IS "+myperson1.age+
"."+"I LIVE IN "+myperson1.address+"<br>"+" MY SISTER NAME IS"+myperson2.name+". "+"HER AGE IS "+myperson2.age+
"." +"HER LIVE AT " +myperson2.address;
</script>

 
                                       30.what diffrence while and DOwhile loop?
                                       

answer-
                                               swhile loop---

The condition is checked before executing the loop body.
If the condition is false initially, the loop body will not execute even once.

                                           do while loop----

The loop body is executed once before checking the condition.
If the condition is false initially, the loop body will still execute at least once.
































